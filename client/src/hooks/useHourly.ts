import { useRef } from 'react';
import { selectHourly } from '../store/slices/weatherApiSlice';
import { HourlyChart } from '../utils/services/curves/hourly.service';
import { useFetchState } from './useFetchState';

/**
 * Custom hook to fetch and process hourly weather data.
 *
 * This hook uses the `useFetchState` hook to fetch hourly weather data from the store.
 * It processes the data using the `HourlyChart` service to generate various weather-related
 * information such as scale, curve, precipitation rectangles, descriptions, and timeline.
 *
 * @returns {Object} An object containing the status of the fetch operation and processed weather data.
 * - `status`: The status of the fetch operation.
 * - `data`: An object containing the following properties:
 *   - `wrapperRef`: A reference to the wrapper HTML element.
 *   - `curve`: The curve data generated by the `HourlyChart` service.
 *   - `scale`: The scale data generated by the `HourlyChart` service.
 *   - `precipitationRects`: The precipitation rectangles generated by the `HourlyChart` service.
 *   - `precipitationDesc`: The precipitation description generated by the `HourlyChart` service.
 *   - `timeLine`: The timeline data generated by the `HourlyChart` service.
 *   - `weatherDesc`: The weather description generated by the `HourlyChart` service.
 *   - `isWrapper`: A boolean indicating if the wrapper is present (default is false).
 *   - `windowSize`: An object containing the width and height of the window (default is { width: 0, height: 0 }).
 */
export const useHourly = () => {
	const { status, data } = useFetchState(selectHourly);
	const wrapperRef = useRef<HTMLDivElement>(null);

	if (data && data.hourly && data.timezone && data.userMetrics) {
		const { hourly, timezone, userMetrics } = data;
		const hourlyService = new HourlyChart(hourly, timezone, userMetrics);

		const scale = hourlyService.getScale();
		const curve = hourlyService.drawCurve(true);
		const precipitationRects = hourlyService.getPrecipitationRects();
		const precipitationDesc = hourlyService.getPrecipitationDescription();
		const timeLine = hourlyService.getTimeLine();
		const weatherDesc = hourlyService.getWeatherDescription();

		return {
			status,
			data: {
				wrapperRef,
				curve,
				scale,
				precipitationRects,
				precipitationDesc,
				timeLine,
				weatherDesc,
			},
		};
	}

	return {
		status,
		data: {
			wrapperRef,
			isWrapper: false,
			curve: undefined,
			scale: undefined,
			precipitationRects: undefined,
			precipitationDesc: undefined,
			timeLine: undefined,
			weatherDesc: undefined,
			windowSize: { width: 0, height: 0 },
		},
	};
};
